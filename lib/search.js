// Generated by LiveScript 1.4.0
(function(){
  var Charm, vw, bytesToString, DOWN, UP, BACKSPACE, CTRLC, CTRLD, ENTER, search, out$ = typeof exports != 'undefined' && exports || this;
  Charm = require('charm');
  vw = require('visualwidth');
  bytesToString = function(it){
    switch (it.toString()) {
    case "\n":
    case "\r":
      return "\n";
    default:
      return [].join.call(it, '.');
    }
  };
  DOWN = '27.91.66';
  UP = '27.91.65';
  BACKSPACE = '127';
  CTRLC = '3';
  CTRLD = '4';
  ENTER = "\n";
  out$.search = search = function(items, cb){
    var charm, needle, height, matches;
    charm = Charm();
    charm.pipe(process.stdout);
    charm.reset();
    charm.cursor(false);
    process.stdin.setRawMode(true);
    needle = '';
    height = 0;
    matches = [];
    process.stdin.on('data', function(chunk){
      var that, i$, ref$, len$, item, to$, row, padLength;
      if (height < 0) {
        height = 0;
      }
      if (vw.width(chunk.toString()) === 0) {
        return;
      }
      switch (that = bytesToString(chunk)) {
      case UP:
        height = Math.max(0, height - 1);
        break;
      case DOWN:
        height = Math.min(process.stdout.rows, matches.length - 1, height + 1);
        break;
      case CTRLC:
        process.exit();
        break;
      case CTRLD:
        process.exit();
        break;
      case ENTER:
        process.stdin.setRawMode(false);
        process.stdin.end();
        charm.erase('screen');
        charm.cursor(true);
        charm.display('reset');
        charm.position(1, 1);
        charm.end();
        cb(matches[height]);
        break;
      case BACKSPACE:
        height = 0;
        if (needle.length > 0) {
          needle = needle.substr(0, needle.length - 1);
        }
        break;
      default:
        if (0 !== that.indexOf("27.91.")) {
          needle = needle + chunk;
          height = 0;
        }
      }
      matches = [];
      if (needle.length > 0) {
        for (i$ = 0, len$ = (ref$ = items).length; i$ < len$; ++i$) {
          item = ref$[i$];
          if (-1 < item.indexOf(needle)) {
            matches.push(item);
          }
          if (matches.length > process.stdout.rows) {
            break;
          }
        }
      } else {
        matches = items;
      }
      charm.erase('screen');
      charm.position(1, 1);
      charm.write("query: " + needle);
      for (i$ = 0, to$ = process.stdout.rows - 1; i$ < to$; ++i$) {
        row = i$;
        if (row >= matches.length) {
          return;
        }
        charm.position(1, row + 2);
        if (row === height) {
          charm.display('reverse');
        }
        padLength = Math.max(0, process.stdout.columns - vw.width(matches[row]));
        charm.write(matches[row] + repeatString$(' ', padLength));
        charm.display('reset');
      }
    });
    process.stdin.emit('data', [27, 91, 66]);
    return process.stdin.emit('data', [27, 91, 65]);
  };
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
