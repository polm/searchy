// Generated by LiveScript 1.4.0
(function(){
  var Charm, vw, bytesToString, DOWN, UP, BACKSPACE, CTRLC, CTRLD, ENTER, search, cleanupScreen, drawScreen, getHits, queryHits, out$ = typeof exports != 'undefined' && exports || this;
  Charm = require('charm');
  vw = require('visualwidth');
  bytesToString = function(it){
    switch (it.toString()) {
    case "\n":
    case "\r":
      return "\n";
    default:
      return [].join.call(it, '.');
    }
  };
  DOWN = '27.91.66';
  UP = '27.91.65';
  BACKSPACE = '127';
  CTRLC = '3';
  CTRLD = '4';
  ENTER = "\n";
  out$.search = search = function(items, cb){
    var charm, needle, height, matches;
    charm = Charm();
    charm.pipe(process.stdout);
    charm.reset();
    charm.cursor(false);
    process.stdin.setRawMode(true);
    needle = '';
    height = 0;
    matches = [];
    process.stdin.on('data', function(chunk){
      var that;
      if (height < 0) {
        height = 0;
      }
      if (vw.width(chunk.toString()) === 0) {
        return;
      }
      switch (that = bytesToString(chunk)) {
      case UP:
        height = Math.max(0, height - 1);
        break;
      case DOWN:
        height = Math.min(process.stdout.rows, matches.length - 1, height + 1);
        break;
      case CTRLC:
      case CTRLD:
        cleanupScreen(charm);
        process.exit();
        break;
      case ENTER:
        cleanupScreen(charm);
        if (typeof cb == 'function') {
          cb(matches[height]);
        }
        break;
      case BACKSPACE:
        height = 0;
        if (needle.length > 0) {
          needle = needle.substr(0, needle.length - 1);
        }
        break;
      default:
        if (0 !== that.indexOf("27.91.")) {
          needle = needle + chunk;
          height = 0;
        }
      }
      matches = getHits(needle, items);
      return drawScreen(charm, needle, height, matches);
    });
    process.stdin.emit('data', [27, 91, 66]);
    return process.stdin.emit('data', [27, 91, 65]);
  };
  cleanupScreen = function(charm){
    process.stdin.setRawMode(false);
    process.stdin.end();
    charm.erase('screen');
    charm.cursor(true);
    charm.display('reset');
    charm.position(1, 1);
    return charm.end();
  };
  drawScreen = function(charm, needle, selRow, matches){
    var i$, to$, row, padLength;
    charm.erase('screen');
    charm.position(1, 1);
    charm.write("query: " + needle);
    for (i$ = 0, to$ = process.stdout.rows - 1; i$ < to$; ++i$) {
      row = i$;
      if (row >= matches.length) {
        return;
      }
      charm.position(1, row + 2);
      if (row === selRow) {
        charm.display('reverse');
      }
      padLength = Math.max(0, process.stdout.columns - vw.width(matches[row]));
      charm.write(matches[row] + repeatString$(' ', padLength));
      charm.display('reset');
    }
  };
  getHits = function(needle, items){
    var matches, i$, len$, item;
    matches = [];
    for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
      item = items[i$];
      if (queryHits(needle, item)) {
        matches.push(item);
      }
      if (matches.length > process.stdout.rows) {
        break;
      }
    }
    return matches;
  };
  queryHits = function(needle, haystack){
    var option;
    if (!needle || needle.length === 0) {
      return true;
    }
    option = /[A-Z]/.test(needle) ? "" : 'i';
    return new RegExp(needle, option).test(haystack);
  };
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
